name: Build and publish a Docker image

on:
  workflow_dispatch:
    inputs:
      mautic_version:
        description: 'Mautic version (has to be a valid version from `mautic/recommended-project`)'
        required: true
      overwrite_latest_major:
        type: boolean
        description: "Overwrite latest major tag (e.g.`5`). This should only be checked if you're releasing the latest release."
      overwrite_latest_minor:
        type: boolean
        description: "Overwrite latest minor tag (e.g.`5.0`). This should only be checked if you're releasing the latest release within the minor release."
      tag_as_latest:
        type: boolean
        description: "Tag this release as latest"

env:
  REGISTRY: ghcr.io
  DOCKERHUB_USERNAME: molluxmollux
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image_type: [apache, fpm]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            mautic/mautic           
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.mautic_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.mautic_version }},enable=${{ inputs.overwrite_latest_minor }}
            type=semver,pattern={{major}},value=${{ inputs.mautic_version }},enable=${{ inputs.overwrite_latest_major }}
            type=raw,value=latest,enable=${{ inputs.tag_as_latest && matrix.image_type == 'apache' }},suffix=
          flavor: |
            latest=false
            prefix=
            suffix=-${{ matrix.image_type }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build testing Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     file: ${{ matrix.image_type }}/Dockerfile
      #     context: .
      #     platforms: linux/amd64
      #     build-args: |
      #       MAUTIC_VERSION=${{ inputs.mautic_version }}
      #     push: false
      #     tags: test-${{ matrix.image_type }}

      # - name: Run Trivy
      #   uses: aquasecurity/trivy-action@0.30.0
      #   with:
      #     image-ref: test-${{ matrix.image_type }}
      #     format: 'sarif'
      #     ignore-unfixed: true # Won't flag on unpatchable CVEs
      #     output: 'trivy-results-${{ matrix.image_type }}.sarif'
      #     exit-code: '0' # Won't fail on vulns
      #     #trivyignores: .trivyignore
      
      # - name: Upload Trivy SARIF to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results-${{ matrix.image_type }}.sarif'

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ${{ matrix.image_type }}/Dockerfile
          context: .
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.image_type }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.image_type }},mode=max,image-manifest=true
          platforms: linux/amd64,linux/arm64
          build-args: |
            MAUTIC_VERSION=${{ inputs.mautic_version }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}